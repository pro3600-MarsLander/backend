digraph "classes" {
rankdir=BT
charset="utf-8"
"src.environment.action.Action" [color="black", fontcolor="black", label=<{Action|power<br ALIGN="LEFT"/>rotate<br ALIGN="LEFT"/>|last_action(rotate)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.environment.entities.entity.Entity" [color="black", fontcolor="black", label=<{Entity|h_speed : float<br ALIGN="LEFT"/>v_speed : float<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|copy(other)<br ALIGN="LEFT"/>get_state()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.environment.environment.Environment" [color="black", fontcolor="black", label=<{Environment|collision_area : NoneType<br ALIGN="LEFT"/>initial_state<br ALIGN="LEFT"/>lander<br ALIGN="LEFT"/>surface<br ALIGN="LEFT"/>|exit_zone(): bool<br ALIGN="LEFT"/>landing_angle(): bool<br ALIGN="LEFT"/>landing_horizontal_speed(): bool<br ALIGN="LEFT"/>landing_on_site(): bool<br ALIGN="LEFT"/>landing_vertical_speed(): bool<br ALIGN="LEFT"/>next_dynamics_parameters(rotate, power, dt)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>step(action: Action, dt): bool<br ALIGN="LEFT"/>successful_landing(): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.environment.entities.lander.Lander" [color="black", fontcolor="black", label=<{Lander|fuel : int<br ALIGN="LEFT"/>h_speed : float<br ALIGN="LEFT"/>power : int<br ALIGN="LEFT"/>rotate : int<br ALIGN="LEFT"/>v_speed : float<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|get_state()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.utils.point.Point" [color="black", fontcolor="black", label=<{Point|x : int<br ALIGN="LEFT"/>y : int<br ALIGN="LEFT"/>|distance(other): float<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.score.scoring_manager.ScoringManager" [color="black", fontcolor="black", label=<{ScoringManager|<br ALIGN="LEFT"/>|compute_score(environment: Environment)<br ALIGN="LEFT"/>landing_distance(surface: Surface, lander: Lander, collision_land: Segment)<br ALIGN="LEFT"/>scoring_angle(lander)<br ALIGN="LEFT"/>scoring_distance_off_site(distance, surface_length)<br ALIGN="LEFT"/>scoring_distance_on_site()<br ALIGN="LEFT"/>scoring_speed_off_site(lander: Lander, on_site: bool)<br ALIGN="LEFT"/>scoring_speed_on_site(lander: Lander, on_site: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.utils.segment.Segment" [color="black", fontcolor="black", label=<{Segment|point_a<br ALIGN="LEFT"/>point_b<br ALIGN="LEFT"/>|ccw(A: Point, B: Point, C: Point): bool<br ALIGN="LEFT"/>collision(other): bool<br ALIGN="LEFT"/>lenght(): float<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"src.environment.surface.Surface" [color="black", fontcolor="black", label=<{Surface|landing_area<br ALIGN="LEFT"/>lands : list[Segment]<br ALIGN="LEFT"/>length : float<br ALIGN="LEFT"/>|get_points()<br ALIGN="LEFT"/>is_landing_area(segment)<br ALIGN="LEFT"/>they_collide(trajectory: Segment): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
}
